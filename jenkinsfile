pipeline {
    agent {
        label 'AGENT-1'
    }
    options {
        timeout(time: 10, unit: 'MINUTES')
        disableConcurrentBuilds()
        //retry(1)
    }
    parameters{
         choice(name: 'ENVIRONMENT', choices: ['dev', 'qa', 'uat', 'pre-prod', 'prod'], description: 'Select your Environment')
         string(name: 'version', description: 'Enter your application version')
         string(name: 'jira-id', description: 'Enter your jira id')
    }
    environment {
        appVersion = '' // this will become global, we can use across pipeline
        region = 'us-east-1'
        account_id = ''
        project = 'expense'
        environment = ''
        component = 'backend'
    }
    
    stages {
        stage('Setup Environment'){
            steps{
                script{
                    environment = params.ENVIRONMENT
                    appVersion = params.version
                    account_id = pipelineGlobels.getAccountID(environment)
                }
            }
        }
        stage('Integration tests'){
            when {
                expression {params.ENVIRONMENT == 'qa'}
            }
            steps{
                script{
                    sh """
                        echo "Run integration tests"
                        echo "Check jira deployment window"
                        echo "Fail pipeline above two are not true"
                    """
                }
            }
        }
        stage('Check Jira'){
            when {
                expression {params.ENVIRONMENT == 'prod'}
            }
            steps{
                script{
                    sh """
                        echo "Check zera status"
                    """
                }
            }
        }
        stage('Depoly') {                 
            steps{
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        aws eks update-kubeconfig --region ${region} --name ${project}-prod
                        cd helm
                        sed -i 's/IMAGE_VERSION/${appVersion}/g' values-${environment}.yaml
                        helm upgrade --install ${component} -n ${project} -f values-${environment}.yaml .
                    """                   
                } 
            }    
        }
    }
    post { 
        always { 
            echo 'This session runs always'
            deleteDir()
        }
        success { 
            echo 'This session runs when pipeline success'
        }
        failure { 
            echo 'This session runs when pipeline failure'
        }
    }
}

